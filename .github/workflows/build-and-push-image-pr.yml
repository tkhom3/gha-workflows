name: Create Release, Build and Deploy Image

on:
  workflow_call:

jobs:
  create-release:
    name: Create Github Release
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - uses: actions-ecosystem/action-get-merged-pull-request@v1
        id: get-merged-pull-request
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-ecosystem/action-release-label@v1
        id: release-label
        if: ${{ steps.get-merged-pull-request.outputs.title != null }}
        with:
          labels: ${{ steps.get-merged-pull-request.outputs.labels }}

        # Get latest Git tag
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        if: ${{ steps.release-label.outputs.level != null }}
        with:
          semver_only: true

      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        if: ${{ steps.release-label.outputs.level != null }}
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: ${{ steps.release-label.outputs.level }}

      - uses: actions-ecosystem/action-push-tag@v1
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        with:
          tag: ${{ steps.bump-semver.outputs.new_version }}
          message: "${{ steps.bump-semver.outputs.new_version }}: PR #${{ steps.get-merged-pull-request.outputs.number }} ${{ steps.get-merged-pull-request.outputs.title }}"

      # - uses: actions/create-release@v1
      #   if: ${{ steps.release-label.outputs.level == 'major' || steps.release-label.outputs.level == 'minor' || steps.release-label.outputs.level == 'patch'}}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.bump-semver.outputs.new_version }}
      #     release_name: ${{ steps.bump-semver.outputs.new_version }}
      #     # body: ${{ steps.regex-match.outputs.group1 }}

      - uses: softprops/action-gh-release@v1
        if: ${{ steps.release-label.outputs.level == 'major' || steps.release-label.outputs.level == 'minor' || steps.release-label.outputs.level == 'patch'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # generate_release_notes: true
          name: ${{ steps.bump-semver.outputs.new_version }}

      - uses: actions-ecosystem/action-create-comment@v1
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.get-merged-pull-request.outputs.number }}
          body: |
            The new version [${{ steps.bump-semver.outputs.new_version }}](https://github.com/${{ github.repository }}/releases/tag/${{ steps.bump-semver.outputs.new_version }}) has been released :tada:
    
      - name: remove v from version tag
        run: |
          echo ${{ steps.bump-semver.outputs.new_version }}
          FULL_VERSION=${{ steps.bump-semver.outputs.new_version }}
          FULL_VERSION=${FULL_VERSION//V} # Replace v with nothing
          echo VERSION=${FULL_VERSION} >> $GITHUB_ENV # update GitHub ENV vars
      - name: print version
        run: echo ${{ env.VERSION }}
    outputs:
      tags: ${{ env.VERSION }}
  
  build:
    needs: create-release
    name: Build and Deploy Image
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: twod/${{ github.event.repository.name }}
      #     tags: |
      #         type=ref,event=branch
      #         type=semver,pattern={{version}}
      #         type=semver,pattern={{major}}.{{minor}}
      #         type=raw,value=latest

      - name: print Tags
        run: echo ${{ needs.create-release.outputs.tags }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: |
            ${{ github.repository }}:${{ needs.create-release.outputs.tags }}
            ${{ github.repository }}:latest
            ${{ github.repository }}:${{ github.ref_name }}
            ${{ github.repository }}:${{ github.sha }}

          labels: ${{ steps.release.outputs.labels }}
